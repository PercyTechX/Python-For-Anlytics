# -*- coding: utf-8 -*-
"""13_Caso_2_EDA_en_Banca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13zKkg-Hhuw31QXA-G-xzfH7ZSK10KLTh

# **Análisis Exploratorio en Banca**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
import io

from google.colab import files
uploaded = files.upload()

df_app = pd.read_csv(io.BytesIO(uploaded["application_data.csv"]), encoding="latin-1", sep=",")

df_app.shape

df_app.head()

df_app.info()

df_app.agg(["count","nunique"])

"""# **Data Quality Check**"""

pd.set_option("display.max_columns", 200) # para desplegar todas las columnas
pd.set_option("display.max_rows", 150) # para desplegar todas las filas

# Encontrar el porcentaje de valores perdidos por columna

def funcion_obtener_nulos(df):
    output = round(df.isnull().sum()/len(df.index)*100,2)
    return output

NA_col = funcion_obtener_nulos(df_app)

NA_col

# Identificar columnas que tengan valores nulos

NA_col = NA_col[NA_col>0]
NA_col

# Representación gráfica de las variables con % de valores nulos

plt.figure(figsize = (20,4), dpi = 300)
NA_col.plot(kind="bar")
plt.title("Variables con valores nulos")
plt.ylabel("% de valores nulos")

# Identificar y remover variables con alto porcentaje de valores perdidos (50%)

NA_col_50 = NA_col[NA_col>50]
NA_col_50

# Removiendo las columnas con más de 50% de valores perdidos

df_app = df_app.drop(NA_col_50.index, axis = 1)

df_app.shape

# Obtener columnas con <15% de valores nulos

NA_col_15 = NA_col[NA_col < 15]

NA_col_15

NA_col_15.index

df_app[NA_col_15.index].describe()

# Identificar valores únicos en las variables que tienen <15% de valores nulos

df_app[NA_col_15.index].nunique().sort_values(ascending=False)

df_app.hist()

df_app.head()

df_app["FLAG_OWN_CAR"].value_counts()

df_app.info()

df_app.columns.to_list()

# Famoso proceso de casteo

numeric_columns=["TARGET", 'YEARS_BEGINEXPLUATATION_AVG','FLOORSMAX_AVG',]

df_app[numeric_columns] = df_app[numeric_columns].apply(pd.to_numeric)

features = ["CNT_CHILDREN","AMT_INCOME_TOTAL", "AMT_CREDIT",	"AMT_ANNUITY", "DAYS_EMPLOYED", "DAYS_REGISTRATION"]

plt.figure(figsize=(20,15), dpi=300)
for i in enumerate(features):
    plt.subplot(3,2,i[0]+1)
    sns.boxplot(x=i[1],data=df_app)
plt.show()

