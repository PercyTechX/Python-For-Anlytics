# -*- coding: utf-8 -*-
"""09_Introducción_al_Análisis_Univariado.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dDFLJ-Rn6rqqE4Kg1VbYWyiztdEJSnC3

# **Medidas de Tendencia Central**
"""

import numpy as np
import pandas as pd
import scipy
import scipy.stats

from google.colab import files
uploaded = files.upload()

import io

df = pd.read_csv(io.BytesIO(uploaded["bicicletas-compartidas.csv"]),encoding="latin-1",sep=",")

df.head()

df.columns

y = df["bicis-compartidas"].values

y

y = np.where(y == 0,1,y)

np.min(y)

np.max(y)

"""**Promedio Aritmético o Media Aritmética :** Es el valor característico de una serie de datos cuantitativos,objeto de estudio que parte del principio de la esperanza matemática o valor esperado y que se obtiene a partir de la suma de todos sus valores dividida entre el número de sumandos."""

np.mean(y)

np.sum(y)/len(y)

"""**Promedio Geométrico o Media Geométrica:** es la raíz n-ésima del producto de todos los números."""

scipy.stats.mstats.gmean(y)

"""**Promedio Armónico o Media Armónica:** es igual al inverso de la media aritmética de los recíprocos de dichos valores, se recomienda para promediar velocidades."""

scipy.stats.mstats.hmean(y)

"""**Mediana:** representa el valor de la variable de posición central en un conjunto de datos ordenados, en otras palabras divide los valores de la variable en dos partes, coincide con el percentil 50% o 50% de los datos."""

np.median(y)

"""**Moda:** representa el valor con mayor frecuencia de una variable."""

moda = np.nan #defino la variable moda

valores, conteo_valores = np.unique(y, return_counts = True) #retorna arreglo con valores únicos del arrray que le pase

pos = np.argmax(conteo_valores) #del conteo de valores retorname el valor maximo

moda = valores[pos] # con la posición anterior encuentro el valor que más se repite

valores

conteo_valores

pos

moda # El valor que más se repite es 46 bicicletas compartidas

"""# **Medidas de Dispersión**

**Desviación estándar:** es una medida que se utiliza para cuantificar la variación o la dispersión de un conjunto de datos numéricos. Una DE baja indica que la mayor parte de los datos de una muestra tienden a estar agrupados cerca de su media, mientras que una DE alta indica que los datos se extienden sobre un rango de valores más amplio.
"""

np.std(y)

np.var(y)

# Coeficiente de variación

np.std(y)/np.mean(y)

"""# **Medidas de Posición**

Los cuantiles son puntos tomados a intervalos regulares de la función de distribución de una variable aleatoria. Suelen usarse por grupos que dividen la distribución en partes iguales, entendidas como intervalos que comprenden la misma proporción de valores.

*   **Cuartiles:** que dividen a la distribución en cuatro partes (corresponde a los cuantiles 0.25, 0.50 y 0.75)
*  **Quintiles:** que dividen a la distribución en cinco partes (corresponden a los cuantiles 0.20, 0.40, 0.60 y 0.80)
*   **Deciles:** que dividen a la distribución en 10 partes
*   **Percentiles:** que dividen a la distribución en 100 partes
"""

ynum = df['viento'].copy()

ynum

np.min(ynum), np.max(ynum)

"""**Percentiles**"""

# Percentil 100, que corresponde al 100% de los datos

np.percentile(ynum, q=100)

# Percentil 0, que corresponde al 0% de los datos

np.percentile(ynum, q=0)

# Percentil 50, que corresponde al 50% de los datos

np.percentile(ynum, q=50)

# El percentil 50 y la mediana son lo mismo

np.median(ynum)

"""**Cuartiles**"""

cuartiles = [0, 25, 50, 75, 100]
np.percentile(ynum, q=cuartiles)

"""**Quintiles**"""

quintiles = [0, 20, 40, 60, 80, 100]
np.percentile(ynum, q=quintiles)

"""**Deciles**

"""

deciles = list(range(0,110,10))
np.percentile(ynum, q=deciles)

deciles

"""**Outliers (Valores Atíipicos)**

Los valores outliers son aquellos fuera de un rango y que están asociados a los cuartiles. Hay que tenerlos en cuenta ya que habría que hacer un estudio o tratamiento diferente con ellos
"""

y = df["bicis-compartidas"]

y

y.describe()

Q1 = np.percentile(ynum, q=25)
Q3 = np.percentile(ynum, q=75)

IQR = Q3-Q1 #Rango intercuartilico

lim_inf = Q1 - 1.5 * IQR # Método de Tukey
lim_sup = Q3 + 1.5 * IQR

lim_inf, lim_sup

import matplotlib.pyplot as plt
plt.hist(ynum)

